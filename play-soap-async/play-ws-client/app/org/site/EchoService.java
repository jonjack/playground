package org.site;

import java.net.MalformedURLException;
import java.net.URL;

import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.0.4
 * 2015-05-04T19:23:56.077+01:00
 * Generated source version: 3.0.4
 * 
 */
@WebServiceClient(name = "EchoService", wsdlLocation = "file:ECHO/Echo.wsdl", targetNamespace = "http://www.site.org") 
public class EchoService extends Service {

    public final static URL WSDL_LOCATION;
    public final static WebServiceException ECHO_EXCEPTION;
    public final static QName SERVICE = new QName("http://www.site.org", "EchoService");
    public final static QName EchoWSPort = new QName("http://www.site.org", "EchoWSPort");
    
    
    static {
        URL url = null;
        WebServiceException e = null;
        try {
            url = new URL("http://localhost:8080/ws/echo?WSDL");
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        WSDL_LOCATION = url;
        ECHO_EXCEPTION = e;
    }

    public EchoService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public EchoService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public EchoService() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     *
     * @return
     *     returns EchoWS
     */
    @WebEndpoint(name = "EchoWSPort")
    public EchoWS getEchoWSPort() {
        return super.getPort(EchoWSPort, EchoWS.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns EchoWS
     */
    @WebEndpoint(name = "EchoWSPort")
    public EchoWS getEchoWSPort(WebServiceFeature... features) {
        return super.getPort(EchoWSPort, EchoWS.class, features);
    }

}
